import sqlite3
import telebot
from loguru import logger
import openai


class Bot:
    def __init__(self, token):
        self.bot = telebot.TeleBot(token, threaded=False)
        self.bot.set_update_listener(self._bot_internal_handler)

        self.current_msg = None

    def _bot_internal_handler(self, messages):
        """Bot internal messages handler"""
        for message in messages:
            self.current_msg = message
            self.handle_message(message)

    def start(self):
        """Start polling msgs from users, this function never returns"""
        logger.info(
            f"{self.__class__.__name__} is up and listening to new messages...."
        )
        logger.info(f"Telegram Bot information\n\n{self.bot.get_me()}")

        self.bot.infinity_polling()

    def send_text(self, text):
        self.bot.send_message(self.current_msg.chat.id, text)

    def handle_message(self, message):
        """Bot Main message handler"""
        logger.info(f"Incoming message: {message}")
        self.send_text(f"Your original message: {message.text}")


class QuoteBot(Bot):
    def handle_message(self, message):
        logger.info(f"Incoming message: {message}")


class EducationalBot(Bot):
    def search_gpt(self, query):
        # Generate a response
        completion = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": query}],
            max_tokens=1024,
            n=1,
            stop=None,
            temperature=0.7,
        )

        response = completion.choices[0].message.content

        return response

    def handle_message(self, message):
        logger.info(f"Incoming message: {message}")

        if message.text.startswith('/feedback'):
            self.send_feedback_button(message)

    def send_feedback_button(self, message):
        markup = telebot.types.InlineKeyboardMarkup()
        button = telebot.types.InlineKeyboardButton(
            text="Provide Feedback", callback_data="feedback"
        )
        markup.add(button)
        self.bot.send_message(
            message.chat.id,
            "Thank you for using the bot! Please provide your feedback:",
            reply_markup=markup,
        )

    def send_text_with_quote(self, text, message_id=None):
        # Send the original text
        self.send_text(text)

        # Generate a quote and send it
        quote = "This is a quote generated by the bot."
        self.send_text(quote)


if __name__ == "__main__":
    with open(".telegramToken", "r") as telegram_token_file:
        _token = telegram_token_file.read().strip()

    # Load the GPT token from the file
    with open(".gptKey", "r") as gpt_token_file:
        openai_key = gpt_token_file.read().strip()

    my_bot = EducationalBot(_token)

    conn = sqlite3.connect('feedback.db')

    cursor = conn.cursor()


    @my_bot.bot.callback_query_handler(func=lambda call: call.data == 'feedback')
    def ask_for_feedback(call):
        my_bot.bot.send_message(call.message.chat.id, "Please share your thoughts:")
        my_bot.bot.register_next_step_handler_by_chat_id(call.message.chat.id, save_feedback)


    def save_feedback(message):
        user_id = message.from_user.id
        feedback_text = message.text

        try:
            # Connect to the SQLite database and create a cursor
            conn = sqlite3.connect('feedback.db')
            cursor = conn.cursor()

            # Create the 'feedback' table if it doesn't exist
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS feedback (
                    user_id INTEGER,
                    feedback_text TEXT,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ''')

            cursor.execute("INSERT INTO feedback (user_id, feedback_text) VALUES (?, ?)", (user_id, feedback_text))
            conn.commit()

            cursor.close()
            conn.close()

            my_bot.bot.send_message(message.chat.id, "Thank you for your feedback!")

        except sqlite3.Error as e:
            my_bot.bot.send_message(message.chat.id,
                                    "An error occurred while saving your feedback. Please try again later.")

    @my_bot.bot.message_handler(commands=["start"])
    def handle_start(message):
        my_bot.send_text("ðŸ¤– Welcome to Alex, your friendly educational assistant! ðŸ“š\n"
                         "I'm here to help you with any educational queries you have. Whether it's about learning strategies, online courses, educational methods, or any other educational topic, I've got you covered!\n\n"
                         "Feel free to ask me questions or use the commands below to make the most of my features:\n\n"
                         "Click on /help to get started.")


    @my_bot.bot.message_handler(commands=["help"])
    def handle_help(message):
        help_text = (
            "Here are the functionalities you can use with their respective commands:\n\n"
            "/start - Get a warm welcome and introduction to Alex\n"
            "/help - See this list of functionalities and commands\n"
            "/search - Search for educational information\n"
            "/motivation - Let me motivate you to study and learn\n"
            "/feedback - Provide feedback to help improve Alex"
        )
        my_bot.send_text(help_text)


    @my_bot.bot.message_handler(commands=["search"])
    def handle_chatgpt(message):
        # Extract the query by removing '/chatgpt' from the start of the message text
        query = message.text.replace("/search", "").strip()
        # Call the gpt() function with the extracted query
        response = my_bot.search_gpt(query)

        my_bot.send_text_with_quote(response, message_id=message.message_id)


    my_bot.start()

    # Close the SQLite connection when the bot stops polling
    cursor.close()
    conn.close()